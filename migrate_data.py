"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON/Excel –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""
import json
import os
from datetime import datetime
import logging
from bot.database import engine, get_db, init_db
from bot.models import Base, User, City, UserCity, WeatherCache
from bot.services.timezone import TimezoneService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def migrate_users(db):
    """–ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ all_users.json"""
    logger.info("–ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

    try:
        with open('all_users.json', 'r', encoding='utf-8') as f:
            all_users = json.load(f)

        migrated = 0
        skipped = 0

        for telegram_id_str, user_data in all_users.items():
            try:
                telegram_id = int(telegram_id_str)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                existing_user = db.query(User).filter(User.telegram_id == telegram_id).first()

                if existing_user:
                    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    skipped += 1
                    continue

                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
                first_start_str = user_data.get('first_start')
                if first_start_str:
                    try:
                        created_at = datetime.strptime(first_start_str, '%Y-%m-%d %H:%M:%S')
                    except ValueError:
                        created_at = datetime.utcnow()
                else:
                    created_at = datetime.utcnow()

                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = User(
                    telegram_id=telegram_id,
                    is_active=user_data.get('active', True),
                    created_at=created_at,
                    updated_at=created_at,
                    source=user_data.get('source', 'migration'),
                    timezone='UTC'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é UTC, –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–æ–≤
                )

                db.add(user)
                migrated += 1

                if migrated % 10 == 0:
                    db.commit()
                    logger.info(f"–ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {migrated}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id_str}: {e}")
                continue

        db.commit()
        logger.info(f"–ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {migrated}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}")

    except FileNotFoundError:
        logger.warning("–§–∞–π–ª all_users.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        db.rollback()


def migrate_cities_and_user_cities(db):
    """–ú–∏–≥—Ä–∞—Ü–∏—è –≥–æ—Ä–æ–¥–æ–≤ –∏ —Å–≤—è–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–≥–æ—Ä–æ–¥ –∏–∑ user_cities.json"""
    logger.info("–ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ–¥–æ–≤...")

    try:
        with open('user_cities.json', 'r', encoding='utf-8') as f:
            user_cities_data = json.load(f)

        migrated_cities = 0
        migrated_relations = 0
        skipped_relations = 0

        for telegram_id_str, cities_list in user_cities_data.items():
            try:
                telegram_id = int(telegram_id_str)

                # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = db.query(User).filter(User.telegram_id == telegram_id).first()

                if not user:
                    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º...")
                    user = User(
                        telegram_id=telegram_id,
                        is_active=True,
                        source='migration',
                        timezone='UTC'
                    )
                    db.add(user)
                    db.commit()
                    db.refresh(user)

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                for order, city_name in enumerate(cities_list):
                    if not city_name:
                        continue

                    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –≥–æ—Ä–æ–¥
                    city_name_lower = city_name.lower()
                    city = db.query(City).filter(City.name_lower == city_name_lower).first()

                    if not city:
                        city = City(name=city_name, name_lower=city_name_lower)
                        db.add(city)
                        db.commit()
                        db.refresh(city)
                        migrated_cities += 1
                        logger.debug(f"–°–æ–∑–¥–∞–Ω –≥–æ—Ä–æ–¥: {city_name}")

                    # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–≥–æ—Ä–æ–¥
                    existing_relation = db.query(UserCity).filter(
                        UserCity.user_id == user.id,
                        UserCity.city_id == city.id
                    ).first()

                    if existing_relation:
                        skipped_relations += 1
                        continue

                    user_city = UserCity(
                        user_id=user.id,
                        city_id=city.id,
                        order=order
                    )
                    db.add(user_city)
                    migrated_relations += 1

                # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å timezone
                if cities_list and user.timezone == 'UTC':
                    first_city = cities_list[0]
                    timezone = TimezoneService.get_timezone_from_city(first_city)
                    if timezone:
                        user.timezone = timezone
                        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω timezone {timezone} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} (–≥–æ—Ä–æ–¥: {first_city})")

                if migrated_relations % 20 == 0:
                    db.commit()
                    logger.info(f"–ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–≤—è–∑–µ–π: {migrated_relations}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id_str}: {e}")
                db.rollback()
                continue

        db.commit()
        logger.info(
            f"–ú–∏–≥—Ä–∞—Ü–∏—è –≥–æ—Ä–æ–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–æ–≤—ã—Ö –≥–æ—Ä–æ–¥–æ–≤: {migrated_cities}, "
            f"—Å–≤—è–∑–µ–π: {migrated_relations}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_relations}"
        )

    except FileNotFoundError:
        logger.warning("–§–∞–π–ª user_cities.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –≥–æ—Ä–æ–¥–æ–≤")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ–¥–æ–≤: {e}")
        db.rollback()


def migrate_weather_cache(db):
    """–ú–∏–≥—Ä–∞—Ü–∏—è –∫—ç—à–∞ –ø–æ–≥–æ–¥—ã –∏–∑ weather_cache.json"""
    logger.info("–ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫—ç—à–∞ –ø–æ–≥–æ–¥—ã...")

    try:
        with open('weather_cache.json', 'r', encoding='utf-8') as f:
            weather_cache_data = json.load(f)

        migrated = 0
        skipped = 0

        for city_name_lower, weather_data in weather_cache_data.items():
            try:
                # –ù–∞—Ö–æ–¥–∏–º –≥–æ—Ä–æ–¥
                city = db.query(City).filter(City.name_lower == city_name_lower).first()

                if not city:
                    logger.debug(f"–ì–æ—Ä–æ–¥ {city_name_lower} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫—ç—à")
                    skipped += 1
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫—ç—à
                existing_cache = db.query(WeatherCache).filter(WeatherCache.city_id == city.id).first()

                if existing_cache:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫—ç—à
                    existing_cache.temperature = weather_data.get('temp', 0)
                    existing_cache.description = weather_data.get('description', '')
                    existing_cache.emoji = weather_data.get('emoji', 'üå¶Ô∏è')
                    existing_cache.wind_speed = weather_data.get('wind_speed', 0)

                    # –ü–∞—Ä—Å–∏–º timestamp
                    updated_at_ts = weather_data.get('updated_at')
                    if updated_at_ts:
                        existing_cache.updated_at = datetime.fromtimestamp(updated_at_ts)
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫—ç—à
                    updated_at_ts = weather_data.get('updated_at')
                    updated_at = datetime.fromtimestamp(updated_at_ts) if updated_at_ts else datetime.utcnow()

                    cache = WeatherCache(
                        city_id=city.id,
                        temperature=weather_data.get('temp', 0),
                        description=weather_data.get('description', ''),
                        emoji=weather_data.get('emoji', 'üå¶Ô∏è'),
                        wind_speed=weather_data.get('wind_speed', 0),
                        updated_at=updated_at
                    )
                    db.add(cache)

                migrated += 1

                if migrated % 20 == 0:
                    db.commit()
                    logger.info(f"–ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –∫—ç—à–µ–π: {migrated}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫—ç—à–∞ –¥–ª—è {city_name_lower}: {e}")
                continue

        db.commit()
        logger.info(f"–ú–∏–≥—Ä–∞—Ü–∏—è –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {migrated}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}")

    except FileNotFoundError:
        logger.warning("–§–∞–π–ª weather_cache.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∫—ç—à–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫—ç—à–∞ –ø–æ–≥–æ–¥—ã: {e}")
        db.rollback()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    logger.info("=" * 50)
    logger.info("–ù–ê–ß–ê–õ–û –ú–ò–ì–†–ê–¶–ò–ò –î–ê–ù–ù–´–•")
    logger.info("=" * 50)

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        init_db()

        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        db = get_db()

        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        migrate_users(db)
        migrate_cities_and_user_cities(db)
        migrate_weather_cache(db)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_users = db.query(User).count()
        total_cities = db.query(City).count()
        total_relations = db.query(UserCity).count()
        total_cache = db.query(WeatherCache).count()

        logger.info("=" * 50)
        logger.info("–ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        logger.info(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
        logger.info(f"–í—Å–µ–≥–æ –≥–æ—Ä–æ–¥–æ–≤: {total_cities}")
        logger.info(f"–°–≤—è–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–≥–æ—Ä–æ–¥: {total_relations}")
        logger.info(f"–ó–∞–ø–∏—Å–µ–π –∫—ç—à–∞: {total_cache}")
        logger.info("=" * 50)

        db.close()

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        raise


if __name__ == "__main__":
    main()
