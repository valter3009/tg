"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Telegram –±–æ—Ç–∞ GidMeteo
"""
import logging
import time
import threading
import os
import json
from datetime import datetime
import telebot
from telebot import types
from flask import Flask
from threading import Thread

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
from bot.config import config
from bot.database import init_db, get_db, close_db
from bot.models import User, UserCity, City
from bot.services.weather import WeatherService
from bot.services.notifications import NotificationService
from bot.services.analytics import AnalyticsService
from bot.services.timezone import TimezoneService
from bot.utils.helpers import get_or_create_user, add_city_to_user, get_user_cities, format_temperature
from bot.utils.clothes_advice import get_clothing_advice

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, config.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(config.LOG_FILE),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(config.TELEGRAM_TOKEN)
notification_service = NotificationService(bot)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
last_messages = {}


# Flask keepalive –¥–ª—è Railway
app = Flask(__name__)


@app.route('/')
def home():
    return "GidMeteo Bot is running!"


def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    app.run(host='0.0.0.0', port=config.FLASK_PORT)


# =======================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
# =======================

@bot.message_handler(commands=['start'])
def handle_start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        db = get_db()

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = get_or_create_user(
            db,
            message.from_user.id,
            message.from_user.username,
            message.from_user.first_name,
            message.from_user.last_name
        )

        if not user:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        AnalyticsService.log_activity(db, message.from_user.id, 'start')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        send_welcome_message(message.chat.id, db, user)

        db.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_start: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.message_handler(commands=['stats'])
def handle_stats(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        db = get_db()

        # –†–ï–ê–õ–¨–ù–´–ô –ø–æ–¥—Å—á–µ—Ç –ø—Ä—è–º–æ –∏–∑ –±–∞–∑—ã
        total_real = db.query(User).count()
        active_real = db.query(User).filter(User.is_active == True).count()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        user_stats = AnalyticsService.get_user_stats(db)
        activity_stats = AnalyticsService.get_activity_stats(db, days=7)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞
        if not user_stats:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            db.close()
            return

        stats_message = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_stats.get('total_users', 0)} (—Ä–µ–∞–ª—å–Ω–æ –≤ –ë–î: {total_real})\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {user_stats.get('active_users', 0)} (—Ä–µ–∞–ª—å–Ω–æ: {active_real})\n"
            f"‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {user_stats.get('inactive_users', 0)}\n"
            f"üèôÔ∏è –° –≥–æ—Ä–æ–¥–∞–º–∏: {user_stats.get('users_with_cities', 0)}\n"
            f"üö´ –ë–µ–∑ –≥–æ—Ä–æ–¥–æ–≤: {user_stats.get('users_without_cities', 0)}\n\n"
            f"üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 7 –¥–Ω–µ–π:\n"
        )

        activity_by_type = activity_stats.get('activity_by_type', {})
        if activity_by_type:
            for activity_type, count in activity_by_type.items():
                stats_message += f"‚Ä¢ {activity_type}: {count}\n"
        else:
            stats_message += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π\n"

        bot.send_message(message.chat.id, stats_message)

        db.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_stats: {e}", exc_info=True)
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")


@bot.message_handler(commands=['migrate'])
def handle_migrate(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /migrate - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    try:
        db = get_db()

        if not os.path.exists('all_users.json'):
            bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª all_users.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            db.close()
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
        with open('all_users.json', 'r', encoding='utf-8') as f:
            all_users = json.load(f)

        with open('user_cities.json', 'r', encoding='utf-8') as f:
            user_cities = json.load(f)

        bot.send_message(
            message.chat.id,
            f"üì¶ –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã:\n"
            f"‚Ä¢ all_users.json: {len(all_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            f"‚Ä¢ user_cities.json: {len(user_cities)} –∑–∞–ø–∏—Å–µ–π\n\n"
            f"‚è≥ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏..."
        )

        from migrate_data import migrate_users, migrate_cities_and_user_cities

        users_before = db.query(User).count()
        active_before = db.query(User).filter(User.is_active == True).count()

        migrate_users(db)
        migrate_cities_and_user_cities(db)

        users_after = db.query(User).count()
        active_after = db.query(User).filter(User.is_active == True).count()
        new_users = users_after - users_before

        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        all_users_list = db.query(User).all()
        sources = {}
        for u in all_users_list:
            sources[u.source] = sources.get(u.source, 0) + 1

        source_text = "\n".join([f"  ‚Ä¢ {k}: {v}" for k, v in sources.items()])

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        users_created = new_users
        users_updated = users_before  # –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã
        active_change = active_after - active_before

        bot.send_message(
            message.chat.id,
            f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_after} (–±—ã–ª–æ: {users_before})\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_after} (–±—ã–ª–æ: {active_before}, –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {'+' if active_change >= 0 else ''}{active_change})\n"
            f"‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö: {users_created}\n"
            f"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: {users_updated}\n\n"
            f"üìã –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n{source_text}"
        )

        db.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}", exc_info=True)
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {str(e)}")


@bot.message_handler(func=lambda message: True, content_types=['text'])
def handle_text(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≥–æ—Ä–æ–¥)"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–∞–∑—É
        delete_message_safe(message.chat.id, message.message_id)

        db = get_db()
        city_name = message.text.strip()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()

        if not user:
            user = get_or_create_user(
                db,
                message.from_user.id,
                message.from_user.username,
                message.from_user.first_name,
                message.from_user.last_name
            )

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É
        weather = WeatherService.get_weather(db, city_name)

        if not weather:
            # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            error_msg = bot.send_message(
                message.chat.id,
                f"‚ùå –ì–æ—Ä–æ–¥ '{city_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è."
            )
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            threading.Timer(3.0, lambda: delete_message_safe(message.chat.id, error_msg.message_id)).start()
            db.close()
            return

        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≥–æ—Ä–æ–¥–∞
        local_time, timezone_name, formatted_time = TimezoneService.format_city_time(city_name)

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–≤–µ—Ç –ø–æ –æ–¥–µ–∂–¥–µ —Å —É—á–µ—Ç–æ–º –º–µ—Å—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ì–û–†–û–î–ê
        advice = get_clothing_advice(
            weather['temp'],
            weather['description'],
            wind_speed=weather['wind_speed'],
            local_datetime=local_time
        )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –º–µ—Å—Ç–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –≥–æ—Ä–æ–¥–∞
        temp_str = format_temperature(weather['temp'])
        response = (
            f"{weather['emoji']} *{city_name}*\n"
            f"üïê –ú–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è: {formatted_time}\n\n"
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_str}¬∞C\n"
            f"‚òÅÔ∏è {weather['description'].capitalize()}\n"
            f"üí® –í–µ—Ç–µ—Ä: {weather['wind_speed']} –º/—Å\n\n"
            f"{advice}"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start"),
            types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"add_{city_name}")
        )

        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message.chat.id in last_messages:
            last_msg_id = last_messages[message.chat.id].get('message_id')
            if last_msg_id:
                try:
                    bot.edit_message_text(
                        response,
                        message.chat.id,
                        last_msg_id,
                        reply_markup=markup,
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {last_msg_id}: {e}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    sent_msg = bot.send_message(message.chat.id, response, reply_markup=markup, parse_mode='Markdown')
                    last_messages[message.chat.id] = {'message_id': sent_msg.message_id, 'timestamp': time.time()}
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                sent_msg = bot.send_message(message.chat.id, response, reply_markup=markup, parse_mode='Markdown')
                last_messages[message.chat.id] = {'message_id': sent_msg.message_id, 'timestamp': time.time()}
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            sent_msg = bot.send_message(message.chat.id, response, reply_markup=markup, parse_mode='Markdown')
            last_messages[message.chat.id] = {'message_id': sent_msg.message_id, 'timestamp': time.time()}

        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç timezone, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
        if user.timezone == 'UTC':
            timezone = TimezoneService.get_timezone_from_city(city_name)
            if timezone and timezone != 'UTC':
                user.timezone = timezone
                db.commit()
                logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω timezone {timezone} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")

        db.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_text: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_msg = bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        threading.Timer(3.0, lambda: delete_message_safe(message.chat.id, error_msg.message_id)).start()


# =======================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK
# =======================

@bot.callback_query_handler(func=lambda call: call.data == 'refresh')
def handle_refresh(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    try:
        db = get_db()
        user = db.query(User).filter(User.telegram_id == call.from_user.id).first()

        if not user:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
            db.close()
            return

        # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        AnalyticsService.log_activity(db, call.from_user.id, 'refresh')

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        send_welcome_message(call.message.chat.id, db, user, call.message.message_id)

        bot.answer_callback_query(call.id, "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ")
        db.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_refresh: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")


@bot.callback_query_handler(func=lambda call: call.data.startswith('city_'))
def handle_city_click(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –≥–æ—Ä–æ–¥"""
    try:
        db = get_db()
        city_name = call.data.replace('city_', '')

        user = db.query(User).filter(User.telegram_id == call.from_user.id).first()

        if not user:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
            db.close()
            return

        # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        AnalyticsService.log_activity(db, call.from_user.id, 'city_click', city_name)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É
        weather = WeatherService.get_weather(db, city_name, use_cache=False)  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º

        if not weather:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã")
            db.close()
            return

        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≥–æ—Ä–æ–¥–∞
        local_time, timezone_name, formatted_time = TimezoneService.format_city_time(city_name)

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–≤–µ—Ç –ø–æ –æ–¥–µ–∂–¥–µ —Å —É—á–µ—Ç–æ–º –º–µ—Å—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ì–û–†–û–î–ê
        advice = get_clothing_advice(
            weather['temp'],
            weather['description'],
            wind_speed=weather['wind_speed'],
            local_datetime=local_time
        )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –º–µ—Å—Ç–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –≥–æ—Ä–æ–¥–∞
        temp_str = format_temperature(weather['temp'])
        response = (
            f"{weather['emoji']} *{city_name}*\n"
            f"üïê –ú–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è: {formatted_time}\n\n"
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_str}¬∞C\n"
            f"‚òÅÔ∏è {weather['description'].capitalize()}\n"
            f"üí® –í–µ—Ç–µ—Ä: {weather['wind_speed']} –º/—Å\n\n"
            f"{advice}"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥"
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="refresh"),
            types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data=f"delete_{city_name}")
        )

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
        try:
            bot.edit_message_text(
                response,
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup,
                parse_mode='Markdown'
            )
        except:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            bot.send_message(call.message.chat.id, response, reply_markup=markup, parse_mode='Markdown')

        bot.answer_callback_query(call.id, "‚úÖ –ü–æ–≥–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

        db.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_city_click: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞")


@bot.callback_query_handler(func=lambda call: call.data.startswith('add_'))
def handle_add_city(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    try:
        db = get_db()
        city_name = call.data.replace('add_', '')

        user = db.query(User).filter(User.telegram_id == call.from_user.id).first()

        if not user:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
            db.close()
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥
        success, message = add_city_to_user(db, user, city_name)

        if success:
            bot.answer_callback_query(call.id, f"‚úÖ {message}")

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            send_welcome_message(call.message.chat.id, db, user, call.message.message_id)
        else:
            bot.answer_callback_query(call.id, f"‚ùå {message}")

        db.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_add_city: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏")


@bot.callback_query_handler(func=lambda call: call.data == 'back_to_start')
def handle_back_to_start(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' - –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é"""
    try:
        db = get_db()
        user = db.query(User).filter(User.telegram_id == call.from_user.id).first()

        if not user:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
            db.close()
            return

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        send_welcome_message(call.message.chat.id, db, user, call.message.message_id)

        bot.answer_callback_query(call.id, "")
        db.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_back_to_start: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞")


@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
def handle_delete_city(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    try:
        db = get_db()
        city_name = call.data.replace('delete_', '')

        user = db.query(User).filter(User.telegram_id == call.from_user.id).first()

        if not user:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
            db.close()
            return

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è
        from bot.utils.helpers import remove_city_from_user

        # –£–¥–∞–ª—è–µ–º –≥–æ—Ä–æ–¥
        success, message = remove_city_from_user(db, user, city_name)

        if success:
            bot.answer_callback_query(call.id, f"‚úÖ {message}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º)
            send_welcome_message(call.message.chat.id, db, user, call.message.message_id)
        else:
            bot.answer_callback_query(call.id, f"‚ùå {message}")

        db.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_delete_city: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")


@bot.inline_handler(func=lambda query: True)
def handle_inline_query(query):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        city_name = query.query.strip()

        if not city_name:
            # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            results = []
            article = types.InlineQueryResultArticle(
                id='1',
                title='üå§Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞',
                description='–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã',
                input_message_content=types.InputTextMessageContent(
                    message_text='–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @gidmeteo_bot <–Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã'
                )
            )
            results.append(article)
            bot.answer_inline_query(query.id, results, cache_time=1)
            return

        db = get_db()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É
        weather = WeatherService.get_weather(db, city_name)

        if not weather:
            # –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
            results = []
            article = types.InlineQueryResultArticle(
                id='1',
                title=f'‚ùå –ì–æ—Ä–æ–¥ "{city_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω',
                description='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è',
                input_message_content=types.InputTextMessageContent(
                    message_text=f'–ì–æ—Ä–æ–¥ "{city_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.'
                )
            )
            results.append(article)
            bot.answer_inline_query(query.id, results, cache_time=1)
            db.close()
            return

        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≥–æ—Ä–æ–¥–∞
        local_time, timezone_name, formatted_time = TimezoneService.format_city_time(city_name)

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–≤–µ—Ç –ø–æ –æ–¥–µ–∂–¥–µ
        advice = get_clothing_advice(
            weather['temp'],
            weather['description'],
            wind_speed=weather['wind_speed'],
            local_datetime=local_time
        )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        temp_str = format_temperature(weather['temp'])
        message_text = (
            f"{weather['emoji']} *{city_name}*\n"
            f"üïê –ú–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è: {formatted_time}\n\n"
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_str}¬∞C\n"
            f"‚òÅÔ∏è {weather['description'].capitalize()}\n"
            f"üí® –í–µ—Ç–µ—Ä: {weather['wind_speed']} –º/—Å\n\n"
            f"{advice}"
        )

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        results = []
        article = types.InlineQueryResultArticle(
            id='1',
            title=f'{weather["emoji"]} {city_name}: {temp_str}¬∞C',
            description=f'{weather["description"].capitalize()}, –≤–µ—Ç–µ—Ä {weather["wind_speed"]} –º/—Å',
            input_message_content=types.InputTextMessageContent(
                message_text=message_text,
                parse_mode='Markdown'
            )
        )
        results.append(article)

        bot.answer_inline_query(query.id, results, cache_time=300)

        db.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_inline_query: {e}")
        try:
            results = []
            article = types.InlineQueryResultArticle(
                id='1',
                title='‚ùå –û—à–∏–±–∫–∞',
                description='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã',
                input_message_content=types.InputTextMessageContent(
                    message_text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
                )
            )
            results.append(article)
            bot.answer_inline_query(query.id, results, cache_time=1)
        except:
            pass


# =======================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =======================

def delete_message_safe(chat_id, message_id):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ—à–∏–±–∫–∏"""
    try:
        bot.delete_message(chat_id, message_id)
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")


def send_welcome_message(chat_id, db, user, message_id=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–æ—Ä–æ–¥–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cities = get_user_cities(db, user)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = types.InlineKeyboardMarkup(row_width=1)

        cities_weather_text = []

        for city in cities:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É –∏–∑ –∫—ç—à–∞
            weather = WeatherService.get_weather(db, city.name)

            if weather:
                # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≥–æ—Ä–æ–¥–∞
                local_time, _, formatted_time = TimezoneService.format_city_time(city.name)
                time_emoji = TimezoneService.get_time_of_day_emoji(local_time.hour)

                temp_str = format_temperature(weather['temp'])
                wind_speed = weather['wind_speed']
                button_text = f"{weather['emoji']} {city.name} {temp_str}¬∞C üí® {wind_speed} –º/—Å {time_emoji}"
                cities_weather_text.append(f"{weather['emoji']} {city.name} {temp_str}¬∞C üí® {wind_speed} –º/—Å {time_emoji}")
            else:
                button_text = city.name
                cities_weather_text.append(city.name)

            markup.add(types.InlineKeyboardButton(
                text=button_text,
                callback_data=f"city_{city.name}"
            ))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if cities:
            markup.add(types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh"))

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        if cities_weather_text:
            welcome_text = (
                "\n".join(cities_weather_text) +
                "\n\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –∏ —è —Å–∫–∞–∂—É –∫–∞–∫–∞—è —Ç–∞–º –ø–æ–≥–æ–¥–∞ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, "
                "–¥–∞–º —Å–æ–≤–µ—Ç—ã –ø–æ –æ–¥–µ–∂–¥–µ.\n\n"
                "üí° –û—Ç–ø—Ä–∞–≤–ª—è–π –ø—Ä–æ–≥–Ω–æ–∑—ã –≤ –ª—é–±–æ–π —á–∞—Ç: –≤–≤–µ–¥–∏ @MeteoblueBot + –≥–æ—Ä–æ–¥ –≤ –ª—é–±–æ–º —á–∞—Ç–µ –¢–µ–ª–µ–≥—Ä–∞–º"
            )
        else:
            welcome_text = (
                "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –∏ —è —Å–∫–∞–∂—É –∫–∞–∫–∞—è —Ç–∞–º –ø–æ–≥–æ–¥–∞ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, "
                "–¥–∞–º —Å–æ–≤–µ—Ç—ã –ø–æ –æ–¥–µ–∂–¥–µ.\n\n"
                "üí° –û—Ç–ø—Ä–∞–≤–ª—è–π –ø—Ä–æ–≥–Ω–æ–∑—ã –≤ –ª—é–±–æ–π —á–∞—Ç: –≤–≤–µ–¥–∏ @MeteoblueBot + –≥–æ—Ä–æ–¥ –≤ –ª—é–±–æ–º —á–∞—Ç–µ –¢–µ–ª–µ–≥—Ä–∞–º"
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message_id:
            try:
                bot.edit_message_text(
                    text=welcome_text,
                    chat_id=chat_id,
                    message_id=message_id,
                    reply_markup=markup
                )
            except telebot.apihelper.ApiTelegramException:
                # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                sent_msg = bot.send_message(chat_id, welcome_text, reply_markup=markup)
                last_messages[chat_id] = {'message_id': sent_msg.message_id, 'timestamp': time.time()}
        else:
            sent_msg = bot.send_message(chat_id, welcome_text, reply_markup=markup)
            last_messages[chat_id] = {'message_id': sent_msg.message_id, 'timestamp': time.time()}

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_welcome_message: {e}")


def auto_update_task():
    """–ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ)"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

    while True:
        try:
            db = get_db()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            stats = notification_service.send_auto_updates(db)

            logger.info(f"–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {stats['messages_sent']} –∏–∑ {stats['total_attempts']}")

            db.close()

            # –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            time.sleep(60)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ auto_update_task: {e}")
            time.sleep(300)  # 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ


# =======================
# –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# =======================

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("=" * 50)
    logger.info("–ó–∞–ø—É—Å–∫ GidMeteo –±–æ—Ç–∞ v2.0")
    logger.info("=" * 50)

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        init_db()

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        try:
            db = get_db()
            user_count = db.query(User).count()

            if user_count == 0 and os.path.exists('all_users.json'):
                logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞—è. –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...")
                from migrate_data import migrate_users, migrate_cities_and_user_cities

                migrate_users(db)
                migrate_cities_and_user_cities(db)

                new_user_count = db.query(User).count()
                logger.info(f"–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {new_user_count}")
            elif user_count > 0:
                logger.info(f"–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –µ—Å—Ç—å {user_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

            db.close()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é: {e}")

        # –ó–∞–ø—É—Å–∫ Flask keepalive –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        logger.info(f"–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {config.FLASK_PORT}...")
        flask_thread = Thread(target=run_flask, daemon=True)
        flask_thread.start()

        # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        logger.info("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
        auto_update_thread = threading.Thread(target=auto_update_task, daemon=True)
        auto_update_thread.start()

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ë–æ—Ç GidMeteo –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        bot.infinity_polling(timeout=60, long_polling_timeout=60)

    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        close_db()
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    main()
