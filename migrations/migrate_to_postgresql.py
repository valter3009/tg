"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (JSON/Excel) –≤ PostgreSQL

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python migrations/migrate_to_postgresql.py

–ú–∏–≥—Ä–∏—Ä—É–µ—Ç:
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ all_users.json
- –ì–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ user_cities.json
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ bot_activity_log.xlsx (–µ—Å–ª–∏ –µ—Å—Ç—å)
"""
import json
import os
import sys
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.config import Config
from app.database.db_service import DatabaseService

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ Excel
try:
    import pandas as pd
    PANDAS_AVAILABLE = True
except ImportError:
    PANDAS_AVAILABLE = False
    print("Warning: pandas not available, Excel migration will be skipped")


def migrate_users(db_service: DatabaseService, json_path: str):
    """–ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ all_users.json"""
    if not os.path.exists(json_path):
        print(f"‚ö†Ô∏è  File {json_path} not found, skipping users migration")
        return 0

    print(f"üìã Loading users from {json_path}...")
    with open(json_path, 'r', encoding='utf-8') as f:
        all_users = json.load(f)

    migrated = 0
    for user_id_str, user_info in all_users.items():
        try:
            user_id = int(user_id_str)
            source = user_info.get('source', 'additional_list')
            active = user_info.get('active', True)

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_service.add_user(user_id, source=source)

            # –ï—Å–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
            if not active:
                db_service.deactivate_user(user_id)

            migrated += 1
        except Exception as e:
            print(f"‚ö†Ô∏è  Error migrating user {user_id_str}: {e}")

    print(f"‚úÖ Migrated {migrated} users")
    return migrated


def migrate_cities(db_service: DatabaseService, json_path: str):
    """–ú–∏–≥—Ä–∞—Ü–∏—è –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ user_cities.json"""
    if not os.path.exists(json_path):
        print(f"‚ö†Ô∏è  File {json_path} not found, skipping cities migration")
        return 0

    print(f"üìã Loading cities from {json_path}...")
    with open(json_path, 'r', encoding='utf-8') as f:
        user_cities = json.load(f)

    migrated = 0
    for user_id_str, cities in user_cities.items():
        try:
            user_id = int(user_id_str)
            for city in cities:
                db_service.add_user_city(user_id, city)
                migrated += 1
        except Exception as e:
            print(f"‚ö†Ô∏è  Error migrating cities for user {user_id_str}: {e}")

    print(f"‚úÖ Migrated {migrated} cities")
    return migrated


def migrate_activity_excel(db_service: DatabaseService, excel_path: str):
    """–ú–∏–≥—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ bot_activity_log.xlsx"""
    if not PANDAS_AVAILABLE:
        print("‚ö†Ô∏è  pandas not available, skipping Excel migration")
        return 0

    if not os.path.exists(excel_path):
        print(f"‚ö†Ô∏è  File {excel_path} not found, skipping activity migration")
        return 0

    print(f"üìã Loading activity from {excel_path}...")

    migrated_actions = 0

    try:
        # –ú–∏–≥—Ä–∞—Ü–∏—è –∫–ª–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–µ "–û–±–Ω–æ–≤–∏—Ç—å"
        try:
            df_refresh = pd.read_excel(excel_path, sheet_name='Refresh Button')
            for _, row in df_refresh.iterrows():
                user_id = int(row['User ID'])
                count = int(row['Count'])

                # –õ–æ–≥–∏—Ä—É–µ–º count —Ä–∞–∑ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
                for _ in range(count):
                    db_service.log_activity(user_id, 'refresh')
                migrated_actions += count

            print(f"  ‚úÖ Migrated {len(df_refresh)} refresh users")
        except Exception as e:
            print(f"  ‚ö†Ô∏è  Error migrating refresh data: {e}")

        # –ú–∏–≥—Ä–∞—Ü–∏—è –∫–ª–∏–∫–æ–≤ –ø–æ –≥–æ—Ä–æ–¥–∞–º
        try:
            df_cities = pd.read_excel(excel_path, sheet_name='City Buttons')
            for _, row in df_cities.iterrows():
                user_id = int(row['User ID'])
                city = row['City']
                count = int(row['Count'])

                # –õ–æ–≥–∏—Ä—É–µ–º count —Ä–∞–∑ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
                for _ in range(count):
                    db_service.log_activity(user_id, 'city_click', city_name=city)
                migrated_actions += count

            print(f"  ‚úÖ Migrated {len(df_cities)} city click records")
        except Exception as e:
            print(f"  ‚ö†Ô∏è  Error migrating city data: {e}")

        # –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /start
        try:
            df_start = pd.read_excel(excel_path, sheet_name='Start Command')
            for _, row in df_start.iterrows():
                user_id = int(row['User ID'])
                count = int(row['Count'])

                # –õ–æ–≥–∏—Ä—É–µ–º count —Ä–∞–∑ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
                for _ in range(count):
                    db_service.log_activity(user_id, 'start_command')
                migrated_actions += count

            print(f"  ‚úÖ Migrated {len(df_start)} start command records")
        except Exception as e:
            print(f"  ‚ö†Ô∏è  Error migrating start data: {e}")

    except Exception as e:
        print(f"‚ö†Ô∏è  Error reading Excel file: {e}")

    print(f"‚úÖ Migrated {migrated_actions} activity records")
    return migrated_actions


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("=" * 60)
    print("üîÑ GidMeteo Migration Script")
    print("=" * 60)
    print()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        print(f"üìä Database URL: {Config.DATABASE_URL[:50]}...")
    except Exception as e:
        print(f"‚ùå Error loading config: {e}")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    print("üîå Connecting to database...")
    try:
        db_service = DatabaseService(Config.DATABASE_URL)
        print("‚úÖ Connected to database")
    except Exception as e:
        print(f"‚ùå Error connecting to database: {e}")
        return

    print()
    print("Starting migration...")
    print()

    # –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_migrated = migrate_users(db_service, 'all_users.json')
    print()

    # –ú–∏–≥—Ä–∞—Ü–∏—è –≥–æ—Ä–æ–¥–æ–≤
    cities_migrated = migrate_cities(db_service, 'user_cities.json')
    print()

    # –ú–∏–≥—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    activity_migrated = migrate_activity_excel(db_service, 'bot_activity_log.xlsx')
    print()

    # –ò—Ç–æ–≥–∏
    print("=" * 60)
    print("‚úÖ Migration completed!")
    print("=" * 60)
    print(f"üìä Summary:")
    print(f"  - Users:    {users_migrated}")
    print(f"  - Cities:   {cities_migrated}")
    print(f"  - Activity: {activity_migrated}")
    print()
    print("üéâ You can now run the bot with: python main.py")
    print()


if __name__ == '__main__':
    main()
