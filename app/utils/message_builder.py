"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
"""
from typing import Dict, List
from telebot import types

from .helpers import format_temperature, format_datetime, get_season, get_time_of_day
from ..services.clothes_advice import get_clothing_advice


class MessageBuilder:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""

    @staticmethod
    def build_weather_message(city: str, weather_data: Dict) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–≥–æ–¥–µ

        Args:
            city: –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
            weather_data: –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –∏–∑ weather_service

        Returns:
            str: –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        temp_str = format_temperature(weather_data['temp'])
        description = weather_data['description']
        description_cap = description[0].upper() + description[1:]
        emoji = weather_data['emoji']
        wind_speed = weather_data['wind_speed']

        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –≥–æ–¥–∞ –∏ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫
        season = get_season()
        time_of_day = get_time_of_day()

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–≤–µ—Ç –ø–æ –æ–¥–µ–∂–¥–µ
        clothes_advice = get_clothing_advice(
            weather_data['temp'],
            description,
            season,
            time_of_day,
            wind_speed
        )

        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—â—É—â–∞–µ—Ç—Å—è (–ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ 2 –≥—Ä–∞–¥—É—Å–∞ –º–µ–Ω—å—à–µ)
        feels_like = weather_data['temp'] - 2
        temp_feels_str = format_temperature(feels_like)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_time = format_datetime(weather_data['updated_at'])

        message = (
            f"{emoji} {city} {description_cap}\n"
            f"üå°Ô∏è t¬∞ {temp_str}¬∞C\n"
            f"üå°Ô∏è t¬∞–æ—â—É—â. {temp_feels_str}¬∞C\n"
            f"üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ | {wind_speed} –º/—Å\n"
            f"{clothes_advice}\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_time}"
        )

        return message

    @staticmethod
    def build_welcome_message(user_cities: List[str], cities_weather: Dict[str, Dict]) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        Args:
            user_cities: —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cities_weather: —Å–ª–æ–≤–∞—Ä—å {city: weather_data}

        Returns:
            str: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if not user_cities:
            return (
                "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –∏ —è —Å–∫–∞–∂—É –∫–∞–∫–∞—è —Ç–∞–º –ø–æ–≥–æ–¥–∞ "
                "–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –¥–∞–º —Å–æ–≤–µ—Ç—ã –ø–æ –æ–¥–µ–∂–¥–µ.\n\n"
                "üí° –û—Ç–ø—Ä–∞–≤–ª—è–π –ø—Ä–æ–≥–Ω–æ–∑—ã –≤ –ª—é–±–æ–π —á–∞—Ç: –≤–≤–µ–¥–∏ @MeteoblueBot + –≥–æ—Ä–æ–¥ "
                "–≤ –ª—é–±–æ–º —á–∞—Ç–µ –¢–µ–ª–µ–≥—Ä–∞–º"
            )

        cities_text = []
        for city in user_cities:
            weather = cities_weather.get(city)
            if weather:
                temp_str = format_temperature(weather['temp'])
                city_text = f"{weather['emoji']} {city} {temp_str}¬∞C"
            else:
                city_text = city
            cities_text.append(city_text)

        message = "\n".join(cities_text)
        message += (
            "\n\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –∏ —è —Å–∫–∞–∂—É –∫–∞–∫–∞—è —Ç–∞–º –ø–æ–≥–æ–¥–∞ "
            "–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –¥–∞–º —Å–æ–≤–µ—Ç—ã –ø–æ –æ–¥–µ–∂–¥–µ.\n\n"
            "üí° –û—Ç–ø—Ä–∞–≤–ª—è–π –ø—Ä–æ–≥–Ω–æ–∑—ã –≤ –ª—é–±–æ–π —á–∞—Ç: –≤–≤–µ–¥–∏ @MeteoblueBot + –≥–æ—Ä–æ–¥ "
            "–≤ –ª—é–±–æ–º —á–∞—Ç–µ –¢–µ–ª–µ–≥—Ä–∞–º"
        )

        return message

    @staticmethod
    def build_reminder_message() -> str:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –≥–æ—Ä–æ–¥–æ–≤"""
        return (
            "üå§Ô∏è –ü—Ä–∏–≤–µ—Ç! –ü–æ—Ä–∞ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ "
            "–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–µ–∂–¥–µ.\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª—é–±–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É:\n"
            "‚Ä¢ –¢–µ–∫—É—â—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É\n"
            "‚Ä¢ –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è\n"
            "‚Ä¢ –ß—Ç–æ –ª—É—á—à–µ –Ω–∞–¥–µ—Ç—å\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üòä"
        )

    @staticmethod
    def create_cities_keyboard(user_cities: List[str], cities_weather: Dict[str, Dict]) -> types.InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≥–æ—Ä–æ–¥–æ–≤

        Args:
            user_cities: —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cities_weather: —Å–ª–æ–≤–∞—Ä—å {city: weather_data}

        Returns:
            InlineKeyboardMarkup: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        """
        markup = types.InlineKeyboardMarkup(row_width=1)

        for city in user_cities:
            weather = cities_weather.get(city)
            if weather:
                temp_str = format_temperature(weather['temp'])
                button_text = f"{weather['emoji']} {city} {temp_str}¬∞C üí®{weather['wind_speed']}–º/—Å"
            else:
                button_text = city

            markup.add(types.InlineKeyboardButton(
                text=button_text,
                callback_data=f"city_{city}"
            ))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ä–æ–¥–∞
        if user_cities:
            markup.add(types.InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                callback_data="refresh"
            ))

        return markup

    @staticmethod
    def create_weather_keyboard(city: str, is_saved: bool) -> types.InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–≥–æ–¥—ã –≥–æ—Ä–æ–¥–∞

        Args:
            city: –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
            is_saved: —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–∏ –≥–æ—Ä–æ–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            InlineKeyboardMarkup: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        """
        markup = types.InlineKeyboardMarkup(row_width=2)

        if is_saved:
            markup.add(
                types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data=f"remove_{city}"),
                types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")
            )
        else:
            markup.add(
                types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data=f"add_{city}"),
                types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")
            )

        return markup
