"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import logging
from typing import Dict, Optional
from datetime import datetime

from ..database.db_service import DatabaseService

logger = logging.getLogger(__name__)


class ActivityService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""

    def __init__(self, db_service: DatabaseService):
        self.db_service = db_service

    def log_start_command(self, user_id: int):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /start"""
        self.db_service.log_activity(user_id, 'start_command')
        logger.debug(f"Logged /start command for user {user_id}")

    def log_refresh(self, user_id: int):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–û–±–Ω–æ–≤–∏—Ç—å'"""
        self.db_service.log_activity(user_id, 'refresh')
        logger.debug(f"Logged refresh for user {user_id}")

    def log_city_click(self, user_id: int, city_name: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≥–æ—Ä–æ–¥–∞"""
        self.db_service.log_activity(user_id, 'city_click', city_name)
        logger.debug(f"Logged city click '{city_name}' for user {user_id}")

    def log_auto_update(self, total_attempts: int, messages_sent: int,
                       users_with_cities: int, users_without_cities: int,
                       blocked_users: int, errors: int):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        self.db_service.log_auto_update(
            total_attempts=total_attempts,
            messages_sent=messages_sent,
            users_with_cities=users_with_cities,
            users_without_cities=users_without_cities,
            blocked_users=blocked_users,
            errors=errors
        )
        logger.info(f"Auto update logged: {messages_sent}/{total_attempts} messages sent")

    def generate_activity_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        stats = self.db_service.get_activity_stats()
        auto_update_stats = self.db_service.get_auto_update_stats()
        recent_updates = self.db_service.get_recent_auto_updates(limit=5)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        from .user_service import UserService
        user_service = UserService(self.db_service)
        user_stats = user_service.get_user_stats()

        report = f"üìä –û—Ç—á–µ—Ç –æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ GidMeteo\n"
        report += f"üïê –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        report += "üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:\n"
        report += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {user_stats['total_users']}\n"
        report += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {user_stats['active_users']}\n"
        report += f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞): {user_stats['inactive_users']}\n"
        report += f"‚Ä¢ –° –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏: {user_stats['users_with_cities']}\n"
        report += f"‚Ä¢ –ë–µ–∑ –≥–æ—Ä–æ–¥–æ–≤: {user_stats['users_without_cities']}\n"
        report += f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user_stats['activity_rate']:.1f}%\n\n"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
        report += "üéØ –î–ï–ô–°–¢–í–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:\n"
        report += f"‚Ä¢ –í—Å–µ–≥–æ –Ω–∞–∂–∞—Ç–∏–π '–û–±–Ω–æ–≤–∏—Ç—å': {stats['total_refresh']}\n"
        report += f"‚Ä¢ –í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤ –ø–æ –≥–æ—Ä–æ–¥–∞–º: {stats['total_city_clicks']}\n"
        report += f"‚Ä¢ –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π /start: {stats['total_start']}\n\n"

        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º
        if stats['top_refresh_users']:
            report += "üîÑ –¢–û–ü-5 –ü–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø–ú:\n"
            for i, user in enumerate(stats['top_refresh_users'], 1):
                report += f"{i}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['user_id']}: {user['count']} —Ä–∞–∑\n"
            report += "\n"

        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ /start
        if stats['top_start_users']:
            report += "üöÄ –¢–û–ü-5 –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ /START:\n"
            for i, user in enumerate(stats['top_start_users'], 1):
                report += f"{i}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['user_id']}: {user['count']} —Ä–∞–∑\n"
            report += "\n"

        # –¢–æ–ø –≥–æ—Ä–æ–¥–æ–≤
        if stats['top_cities']:
            report += "üèôÔ∏è –¢–û–ü-5 –ü–û–ü–£–õ–Ø–†–ù–´–• –ì–û–†–û–î–û–í:\n"
            for i, city in enumerate(stats['top_cities'], 1):
                report += f"{i}. {city['city']}: {city['count']} –∫–ª–∏–∫–æ–≤\n"
            report += "\n"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        report += "üîÅ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø:\n"
        report += f"‚Ä¢ –í—Å–µ–≥–æ —Ä–∞—Å—Å—ã–ª–æ–∫: {auto_update_stats['total_updates']}\n"
        report += f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {auto_update_stats['total_sent']}\n"
        if auto_update_stats['last_update']:
            report += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {auto_update_stats['last_update'].strftime('%Y-%m-%d %H:%M:%S')}\n"
        report += "\n"

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        if recent_updates:
            report += "üìÖ –ü–û–°–õ–ï–î–ù–ò–ï 5 –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ô:\n"
            for update in recent_updates:
                report += (
                    f"‚Ä¢ {update['timestamp'].strftime('%Y-%m-%d %H:%M:%S')} - "
                    f"–ü–æ–ø—ã—Ç–æ–∫: {update['total_attempts']}, "
                    f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {update['messages_sent']}, "
                    f"–° –≥–æ—Ä–æ–¥–∞–º–∏: {update['users_with_cities']}, "
                    f"–ë–µ–∑ –≥–æ—Ä–æ–¥–æ–≤: {update['users_without_cities']}, "
                    f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {update['blocked_users']}, "
                    f"–û—à–∏–±–æ–∫: {update['errors']}\n"
                )

        return report

    def get_user_check_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        from .user_service import UserService
        user_service = UserService(self.db_service)
        user_stats = user_service.get_user_stats()

        report = f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        report += f"üïê {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"

        report += "üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n"
        report += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_stats['total_users']}\n"
        report += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {user_stats['active_users']}\n"
        report += f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞): {user_stats['inactive_users']}\n\n"

        report += "üèôÔ∏è –ü–û –ù–ê–õ–ò–ß–ò–Æ –ì–û–†–û–î–û–í:\n"
        report += f"‚Ä¢ –° –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏: {user_stats['users_with_cities']}\n"
        report += f"‚Ä¢ –ë–µ–∑ –≥–æ—Ä–æ–¥–æ–≤: {user_stats['users_without_cities']}\n\n"

        report += "üìù –ü–û –ò–°–¢–û–ß–ù–ò–ö–ê–ú:\n"
        report += f"‚Ä¢ –ò–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: {user_stats['from_additional_list']}\n"
        report += f"‚Ä¢ –ß–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start: {user_stats['from_start_command']}\n\n"

        report += f"‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_stats['activity_rate']:.1f}%\n"

        return report
