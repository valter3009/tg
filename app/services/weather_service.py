"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–≥–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""
import requests
import logging
from typing import Optional, Dict
from datetime import datetime

from ..config import Config
from ..database.db_service import DatabaseService

logger = logging.getLogger(__name__)


class WeatherService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã"""

    def __init__(self, db_service: DatabaseService):
        self.db_service = db_service
        self.api_key = Config.OPENWEATHER_API_KEY
        self.base_url = "https://api.openweathermap.org/data/2.5/weather"

    def get_weather_emoji(self, description: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã"""
        description = description.lower()

        if any(word in description for word in ['—è—Å–Ω–æ', '—á–∏—Å—Ç–æ–µ –Ω–µ–±–æ', '–±–µ–∑–æ–±–ª–∞—á–Ω–æ']):
            return '‚òÄÔ∏è'
        elif any(word in description for word in ['–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏', '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å']):
            return '‚õÖ'
        elif any(word in description for word in ['–æ–±–ª–∞—á–Ω–æ', '–ø–∞—Å–º—É—Ä–Ω–æ']):
            return '‚òÅÔ∏è'
        elif any(word in description for word in ['–¥–æ–∂–¥—å', '–ª–∏–≤–µ–Ω—å']):
            return 'üåßÔ∏è'
        elif any(word in description for word in ['–≥—Ä–æ–∑–∞']):
            return '‚õàÔ∏è'
        elif any(word in description for word in ['—Å–Ω–µ–≥', '—Å–Ω–µ–≥–æ–ø–∞–¥']):
            return '‚ùÑÔ∏è'
        elif any(word in description for word in ['—Ç—É–º–∞–Ω', '–º–≥–ª–∞']):
            return 'üå´Ô∏è'
        else:
            return 'üå¶Ô∏è'

    def get_weather_from_api(self, city: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –∏–∑ OpenWeatherMap API"""
        try:
            params = {
                'q': city,
                'units': 'metric',
                'lang': 'ru',
                'appid': self.api_key
            }

            response = requests.get(self.base_url, params=params, timeout=10)
            response.raise_for_status()
            data = response.json()

            if data.get('cod') == '404':
                logger.warning(f"City not found: {city}")
                return None

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            temperature = round(data['main']['temp'], 1)
            description = data['weather'][0]['description']
            wind_speed = int(round(data['wind']['speed']))
            emoji = self.get_weather_emoji(description)

            weather_data = {
                'temp': temperature,
                'description': description,
                'wind_speed': wind_speed,
                'emoji': emoji,
                'updated_at': int(datetime.utcnow().timestamp())
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            self.db_service.update_weather_cache(
                city_name=city,
                temperature=temperature,
                description=description,
                emoji=emoji,
                wind_speed=wind_speed
            )

            logger.info(f"Weather data fetched for {city}: {temperature}¬∞C")
            return weather_data

        except requests.RequestException as e:
            logger.error(f"Error fetching weather for {city}: {e}")
            return None
        except Exception as e:
            logger.error(f"Unexpected error getting weather for {city}: {e}")
            return None

    def get_weather(self, city: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ (—Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–µ—à)

        Returns:
            Dict —Å –ø–æ–ª—è–º–∏: temp, description, wind_speed, emoji, updated_at
            –∏–ª–∏ None –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        cached = self.db_service.get_weather_cache(
            city_name=city,
            max_age_seconds=Config.WEATHER_CACHE_TTL
        )

        if cached:
            logger.debug(f"Using cached weather for {city}")
            return cached

        # –ï—Å–ª–∏ –∫–µ—à–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω —É—Å—Ç–∞—Ä–µ–ª, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑ API
        logger.debug(f"Fetching fresh weather for {city}")
        return self.get_weather_from_api(city)

    def update_all_cities_cache(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–µ—à –ø–æ–≥–æ–¥—ã –¥–ª—è –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤ –≤ –±–∞–∑–µ"""
        cities = self.db_service.get_all_cities()
        logger.info(f"Updating weather cache for {len(cities)} cities")

        for city in cities:
            try:
                self.get_weather_from_api(city)
            except Exception as e:
                logger.error(f"Error updating cache for {city}: {e}")

        logger.info("Weather cache update completed")
