"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
"""
import logging
from datetime import datetime, time
import pytz
from typing import Optional
from geopy.geocoders import Nominatim
from timezonefinder import TimezoneFinder

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º user agent –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è 403 –æ—à–∏–±–æ–∫
tf = TimezoneFinder()
geolocator = Nominatim(
    user_agent="GidMeteo Weather Bot/2.0 (https://t.me/MeteoblueBot)",
    timeout=10
)


class TimezoneService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏"""

    @staticmethod
    def get_timezone_from_city(city_name: str) -> Optional[str]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞

        Args:
            city_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞

        Returns:
            –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Europe/Moscow') –∏–ª–∏ None
        """
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–º –º–∞–ø–ø–∏–Ω–≥–µ
            from bot.services.timezone_mappings import get_timezone_from_mapping
            timezone_name = get_timezone_from_mapping(city_name)

            if timezone_name:
                logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è {city_name} –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞: {timezone_name}")
                return timezone_name

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –º–∞–ø–ø–∏–Ω–≥–µ, –ø—ã—Ç–∞–µ–º—Å—è —á–µ—Ä–µ–∑ Nominatim
            logger.debug(f"–ì–æ—Ä–æ–¥ {city_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞–ø–ø–∏–Ω–≥–µ, –ø—ã—Ç–∞–µ–º—Å—è —á–µ—Ä–µ–∑ Nominatim...")

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
            location = geolocator.geocode(city_name, timeout=10)

            if location:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
                timezone_name = tf.timezone_at(lat=location.latitude, lng=location.longitude)

                if timezone_name:
                    logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è {city_name} —á–µ—Ä–µ–∑ Nominatim: {timezone_name}")
                    return timezone_name
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è {city_name}")
                    return None
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è {city_name}")
                return None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –¥–ª—è {city_name}: {e}")
            return None

    @staticmethod
    def convert_utc_to_local(utc_hour: int, utc_minute: int, timezone_name: str) -> tuple:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç UTC –≤—Ä–µ–º—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è

        Args:
            utc_hour: –ß–∞—Å –≤ UTC
            utc_minute: –ú–∏–Ω—É—Ç–∞ –≤ UTC
            timezone_name: –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞

        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–ª–æ–∫–∞–ª—å–Ω—ã–π_—á–∞—Å, –ª–æ–∫–∞–ª—å–Ω–∞—è_–º–∏–Ω—É—Ç–∞)
        """
        try:
            # –°–æ–∑–¥–∞–µ–º UTC –≤—Ä–µ–º—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            utc_tz = pytz.UTC
            local_tz = pytz.timezone(timezone_name)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
            today = datetime.now(utc_tz).date()
            utc_time = datetime.combine(today, time(utc_hour, utc_minute))
            utc_time = utc_tz.localize(utc_time)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
            local_time = utc_time.astimezone(local_tz)

            return local_time.hour, local_time.minute

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return utc_hour, utc_minute

    @staticmethod
    def get_current_local_time(timezone_name: str) -> datetime:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞

        Args:
            timezone_name: –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞

        Returns:
            –¢–µ–∫—É—â–µ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        """
        try:
            tz = pytz.timezone(timezone_name)
            return datetime.now(tz)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return datetime.now(pytz.UTC)

    @staticmethod
    def should_send_notification(
        user_timezone: str,
        notification_hours: list,
        notification_minute: int = 1
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–µ–π—á–∞—Å

        Args:
            user_timezone: –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            notification_hours: –°–ø–∏—Å–æ–∫ —á–∞—Å–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)
            notification_minute: –ú–∏–Ω—É—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

        Returns:
            True, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        """
        try:
            local_time = TimezoneService.get_current_local_time(user_timezone)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å –≤—Ä–µ–º–µ–Ω–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if local_time.hour in notification_hours and local_time.minute == notification_minute:
                return True

            return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False

    @staticmethod
    def format_time_for_user(dt: datetime, timezone_name: str, format_str: str = '%d.%m.%Y %H:%M:%S') -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –µ–≥–æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ

        Args:
            dt: Datetime –æ–±—ä–µ–∫—Ç (UTC)
            timezone_name: –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            format_str: –§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
        """
        try:
            if dt.tzinfo is None:
                dt = pytz.UTC.localize(dt)

            tz = pytz.timezone(timezone_name)
            local_dt = dt.astimezone(tz)

            return local_dt.strftime(format_str)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return dt.strftime(format_str)

    @staticmethod
    def get_time_of_day_emoji(local_hour: int) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫

        Args:
            local_hour: –ß–∞—Å –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

        Returns:
            –≠–º–æ–¥–∑–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        """
        if 6 <= local_hour < 12:
            return 'üåÖ'  # –£—Ç—Ä–æ
        elif 12 <= local_hour < 18:
            return '‚òÄÔ∏è'  # –î–µ–Ω—å
        elif 18 <= local_hour < 22:
            return 'üåÜ'  # –í–µ—á–µ—Ä
        else:
            return 'üåô'  # –ù–æ—á—å

    @staticmethod
    def format_city_time(city_name: str, city_obj=None, db=None) -> tuple:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≥–æ—Ä–æ–¥–∞

        Args:
            city_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
            city_obj: –û–±—ä–µ–∫—Ç City –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–ª–æ–∫–∞–ª—å–Ω–æ–µ_–≤—Ä–µ–º—è: datetime, timezone_name: str, formatted_time: str)
        """
        try:
            timezone_name = None

            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å timezone –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –≥–æ—Ä–æ–¥–∞
            if city_obj and hasattr(city_obj, 'timezone') and city_obj.timezone:
                timezone_name = city_obj.timezone
                logger.debug(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π timezone –¥–ª—è {city_name}: {timezone_name}")
            # –ï—Å–ª–∏ –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–∞, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            elif db:
                from bot.models import City
                city_from_db = db.query(City).filter(City.name_lower == city_name.lower()).first()
                if city_from_db and city_from_db.timezone:
                    timezone_name = city_from_db.timezone
                    logger.debug(f"–ü–æ–ª—É—á–µ–Ω timezone –∏–∑ –ë–î –¥–ª—è {city_name}: {timezone_name}")

            # –ï—Å–ª–∏ timezone –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —á–µ—Ä–µ–∑ Nominatim
            if not timezone_name:
                logger.debug(f"–û–ø—Ä–µ–¥–µ–ª—è–µ–º timezone –¥–ª—è {city_name} —á–µ—Ä–µ–∑ Nominatim...")
                timezone_name = TimezoneService.get_timezone_from_city(city_name)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º timezone –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                if timezone_name and db and city_obj:
                    city_obj.timezone = timezone_name
                    db.commit()
                    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω timezone {timezone_name} –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_name}")

            if not timezone_name:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º UTC
                timezone_name = 'UTC'
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å timezone –¥–ª—è {city_name}, –∏—Å–ø–æ–ª—å–∑—É–µ–º UTC")

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ timezone –≥–æ—Ä–æ–¥–∞
            local_time = TimezoneService.get_current_local_time(timezone_name)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å —ç–º–æ–¥–∑–∏
            time_emoji = TimezoneService.get_time_of_day_emoji(local_time.hour)
            formatted = f"{time_emoji} {local_time.strftime('%H:%M')}"

            return local_time, timezone_name, formatted

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ä–æ–¥–∞ {city_name}: {e}")
            now = datetime.now(pytz.UTC)
            return now, 'UTC', f"üåç {now.strftime('%H:%M')}"
