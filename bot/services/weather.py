"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–≥–æ–¥–æ–π
"""
import logging
import requests
from datetime import datetime, timedelta
from typing import Optional, Dict
from sqlalchemy.orm import Session
from bot.models import City, WeatherCache
from bot.config import config
from bot.utils.retry import retry_on_exception

logger = logging.getLogger(__name__)


class WeatherService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""

    @staticmethod
    def get_weather_emoji(description: str) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –ø–æ–≥–æ–¥—ã –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é

        Args:
            description: –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã

        Returns:
            –≠–º–æ–¥–∑–∏ –ø–æ–≥–æ–¥—ã
        """
        description = description.lower()

        if any(word in description for word in ['—è—Å–Ω–æ', '—á–∏—Å—Ç–æ–µ –Ω–µ–±–æ', '–±–µ–∑–æ–±–ª–∞—á–Ω–æ']):
            return '‚òÄÔ∏è'
        elif any(word in description for word in ['–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏', '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å']):
            return '‚õÖ'
        elif any(word in description for word in ['–æ–±–ª–∞—á–Ω–æ', '–ø–∞—Å–º—É—Ä–Ω–æ']):
            return '‚òÅÔ∏è'
        elif any(word in description for word in ['–¥–æ–∂–¥—å', '–ª–∏–≤–µ–Ω—å']):
            return 'üåßÔ∏è'
        elif any(word in description for word in ['–≥—Ä–æ–∑–∞']):
            return '‚õàÔ∏è'
        elif any(word in description for word in ['—Å–Ω–µ–≥', '—Å–Ω–µ–≥–æ–ø–∞–¥']):
            return '‚ùÑÔ∏è'
        elif any(word in description for word in ['—Ç—É–º–∞–Ω', '–º–≥–ª–∞']):
            return 'üå´Ô∏è'
        else:
            return 'üå¶Ô∏è'

    @staticmethod
    @retry_on_exception(max_retries=3, delay=1.0, exceptions=(requests.RequestException,))
    def fetch_weather_from_api(city_name: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É –∏–∑ OpenWeatherMap API

        Args:
            city_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–≥–æ–¥—ã –∏–ª–∏ None
        """
        url = f'https://api.openweathermap.org/data/2.5/weather'
        params = {
            'q': city_name,
            'units': 'metric',
            'lang': 'ru',
            'appid': config.OPENWEATHER_API_KEY
        }

        try:
            response = requests.get(url, params=params, timeout=10)
            response.raise_for_status()

            weather_data = response.json()

            if weather_data.get('cod') == '404':
                logger.warning(f"–ì–æ—Ä–æ–¥ {city_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ OpenWeatherMap")
                return None

            temperature = round(weather_data['main']['temp'], 1)
            weather_description = weather_data['weather'][0]['description']
            wind_speed = round(weather_data['wind']['speed'], 1)

            weather_emoji = WeatherService.get_weather_emoji(weather_description)

            return {
                'temp': temperature,
                'emoji': weather_emoji,
                'description': weather_description,
                'wind_speed': wind_speed,
            }

        except requests.RequestException as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è {city_name}: {e}')
            raise
        except Exception as e:
            logger.error(f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è {city_name}: {e}')
            return None

    @staticmethod
    def get_or_create_city(db: Session, city_name: str) -> Optional[City]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≥–æ—Ä–æ–¥ –∏–∑ –ë–î –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π

        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            city_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞

        Returns:
            –û–±—ä–µ–∫—Ç City –∏–ª–∏ None
        """
        try:
            city_name_lower = city_name.lower()

            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥
            city = db.query(City).filter(City.name_lower == city_name_lower).first()

            if not city:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞
                from bot.services.timezone import TimezoneService
                timezone = TimezoneService.get_timezone_from_city(city_name)

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ —Å timezone
                city = City(
                    name=city_name,
                    name_lower=city_name_lower,
                    timezone=timezone
                )
                db.add(city)
                db.commit()
                db.refresh(city)
                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥: {city_name} (timezone: {timezone})")
            elif not city.timezone:
                # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —É –Ω–µ–≥–æ –Ω–µ—Ç timezone, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                from bot.services.timezone import TimezoneService
                timezone = TimezoneService.get_timezone_from_city(city_name)
                if timezone:
                    city.timezone = timezone
                    db.commit()
                    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω timezone –¥–ª—è {city_name}: {timezone}")

            return city

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏/—Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞ {city_name}: {e}")
            db.rollback()
            return None

    @staticmethod
    def get_cached_weather(db: Session, city: City) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É –∏–∑ –∫—ç—à–∞

        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            city: –û–±—ä–µ–∫—Ç –≥–æ—Ä–æ–¥–∞

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–≥–æ–¥—ã –∏–ª–∏ None
        """
        try:
            cache = db.query(WeatherCache).filter(WeatherCache.city_id == city.id).first()

            if cache:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª –ª–∏ –∫—ç—à
                cache_age = (datetime.utcnow() - cache.updated_at).total_seconds()

                if cache_age < config.WEATHER_CACHE_TTL:
                    return {
                        'temp': cache.temperature,
                        'emoji': cache.emoji,
                        'description': cache.description,
                        'wind_speed': cache.wind_speed,
                        'updated_at': cache.updated_at
                    }
                else:
                    logger.debug(f"–ö—ç—à –¥–ª—è {city.name} —É—Å—Ç–∞—Ä–µ–ª ({cache_age:.0f}—Å)")

            return None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—ç—à–∞ –¥–ª—è {city.name}: {e}")
            return None

    @staticmethod
    def update_weather_cache(db: Session, city: City, weather_data: Dict) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –ø–æ–≥–æ–¥—ã

        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            city: –û–±—ä–µ–∫—Ç –≥–æ—Ä–æ–¥–∞
            weather_data: –î–∞–Ω–Ω—ã–µ –ø–æ–≥–æ–¥—ã

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            cache = db.query(WeatherCache).filter(WeatherCache.city_id == city.id).first()

            if cache:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫—ç—à
                cache.temperature = weather_data['temp']
                cache.description = weather_data['description']
                cache.emoji = weather_data['emoji']
                cache.wind_speed = weather_data['wind_speed']
                cache.updated_at = datetime.utcnow()
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫—ç—à
                cache = WeatherCache(
                    city_id=city.id,
                    temperature=weather_data['temp'],
                    description=weather_data['description'],
                    emoji=weather_data['emoji'],
                    wind_speed=weather_data['wind_speed']
                )
                db.add(cache)

            db.commit()
            logger.debug(f"–ö—ç—à –ø–æ–≥–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è {city.name}")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞ –¥–ª—è {city.name}: {e}")
            db.rollback()
            return False

    @staticmethod
    def get_weather(db: Session, city_name: str, use_cache: bool = True) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ (–∏–∑ –∫—ç—à–∞ –∏–ª–∏ API)

        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            city_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
            use_cache: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –∫—ç—à

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–≥–æ–¥—ã –∏–ª–∏ None
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –≥–æ—Ä–æ–¥
            city = WeatherService.get_or_create_city(db, city_name)
            if not city:
                return None

            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
            if use_cache:
                cached_weather = WeatherService.get_cached_weather(db, city)
                if cached_weather:
                    logger.debug(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫—ç—à –¥–ª—è {city_name}")
                    return cached_weather

            # –ü–æ–ª—É—á–∞–µ–º –∏–∑ API
            weather_data = WeatherService.fetch_weather_from_api(city_name)

            if weather_data:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                WeatherService.update_weather_cache(db, city, weather_data)
                return weather_data

            return None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è {city_name}: {e}")
            return None
