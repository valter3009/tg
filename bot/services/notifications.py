"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""
import logging
from typing import List, Dict
from sqlalchemy.orm import Session
import telebot
from bot.models import User, UserCity, City
from bot.services.weather import WeatherService
from bot.services.timezone import TimezoneService
from bot.services.analytics import AnalyticsService
from bot.config import config

logger = logging.getLogger(__name__)


class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""

    def __init__(self, bot: telebot.TeleBot):
        self.bot = bot

    def send_weather_update(self, db: Session, user: User) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –≤–∏–¥–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏

        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            from telebot import types
            from bot.utils.helpers import get_user_cities, format_temperature

            # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cities = get_user_cities(db, user)

            if not cities:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥
                return self.send_reminder(user)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–æ—Ä–æ–¥–∞–º–∏
            markup = types.InlineKeyboardMarkup(row_width=1)
            cities_weather_text = []

            for city in cities:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É –∏–∑ –∫—ç—à–∞
                weather = WeatherService.get_weather(db, city.name)

                if weather:
                    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≥–æ—Ä–æ–¥–∞
                    local_time, _, formatted_time = TimezoneService.format_city_time(city.name)
                    time_emoji = TimezoneService.get_time_of_day_emoji(local_time.hour)

                    temp_str = format_temperature(weather['temp'])
                    wind_speed = weather['wind_speed']
                    button_text = f"{weather['emoji']} {city.name} {temp_str}¬∞C üí® {wind_speed} –º/—Å {time_emoji}"
                    cities_weather_text.append(button_text)
                else:
                    button_text = city.name
                    cities_weather_text.append(city.name)

                markup.add(types.InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"city_{city.name}"
                ))

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if cities:
                markup.add(types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh"))

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            welcome_text = (
                "\n".join(cities_weather_text) +
                "\n\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –∏ —è —Å–∫–∞–∂—É –∫–∞–∫–∞—è —Ç–∞–º –ø–æ–≥–æ–¥–∞ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, "
                "–¥–∞–º —Å–æ–≤–µ—Ç—ã –ø–æ –æ–¥–µ–∂–¥–µ.\n\n"
                "üí° –û—Ç–ø—Ä–∞–≤–ª—è–π –ø—Ä–æ–≥–Ω–æ–∑—ã –≤ –ª—é–±–æ–π —á–∞—Ç: –≤–≤–µ–¥–∏ @MeteoblueBot + –≥–æ—Ä–æ–¥ –≤ –ª—é–±–æ–º —á–∞—Ç–µ –¢–µ–ª–µ–≥—Ä–∞–º"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            self.bot.send_message(user.telegram_id, welcome_text, reply_markup=markup)

            # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            AnalyticsService.log_activity(db, user.telegram_id, 'auto_update')

            return True

        except telebot.apihelper.ApiTelegramException as e:
            if "bot was blocked by the user" in str(e).lower():
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user.is_active = False
                db.commit()
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
            return False

    def send_reminder(self, user: User) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–µ–∑ –≥–æ—Ä–æ–¥–æ–≤

        Args:
            user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        reminder_text = (
            "üå§Ô∏è –ü—Ä–∏–≤–µ—Ç! –ü–æ—Ä–∞ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ "
            "–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–µ–∂–¥–µ.\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª—é–±–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É:\n"
            "‚Ä¢ –¢–µ–∫—É—â—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É\n"
            "‚Ä¢ –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è\n"
            "‚Ä¢ –ß—Ç–æ –ª—É—á—à–µ –Ω–∞–¥–µ—Ç—å\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üòä"
        )

        try:
            self.bot.send_message(user.telegram_id, reminder_text)
            return True

        except telebot.apihelper.ApiTelegramException as e:
            if "bot was blocked by the user" in str(e).lower():
                return False
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
            return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
            return False

    def send_auto_updates(self, db: Session) -> Dict:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —É—á–µ—Ç–æ–º –∏—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤

        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        stats = {
            'total_attempts': 0,
            'messages_sent': 0,
            'users_with_cities': 0,
            'users_without_cities': 0,
            'blocked_users': 0,
            'errors': 0
        }

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = db.query(User).filter(User.is_active == True).all()
            stats['total_attempts'] = len(users)

            logger.info(f"–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

            for user in users:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    should_send = TimezoneService.should_send_notification(
                        user.timezone,
                        config.AUTO_UPDATE_HOURS,
                        config.AUTO_UPDATE_MINUTE
                    )

                    if not should_send:
                        continue

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–æ—Ä–æ–¥–∞
                    user_cities_count = db.query(UserCity).filter(
                        UserCity.user_id == user.id
                    ).count()

                    if user_cities_count > 0:
                        stats['users_with_cities'] += 1
                    else:
                        stats['users_without_cities'] += 1

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    success = self.send_weather_update(db, user)

                    if success:
                        stats['messages_sent'] += 1
                    elif not user.is_active:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
                        stats['blocked_users'] += 1
                    else:
                        stats['errors'] += 1

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {e}")
                    stats['errors'] += 1

            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            AnalyticsService.log_auto_update(
                db,
                stats['total_attempts'],
                stats['messages_sent'],
                stats['users_with_cities'],
                stats['users_without_cities'],
                stats['blocked_users'],
                stats['errors']
            )

            logger.info(
                f"–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['messages_sent']}/{stats['total_attempts']}, "
                f"–æ—à–∏–±–æ–∫: {stats['errors']}, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {stats['blocked_users']}"
            )

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")

        return stats
